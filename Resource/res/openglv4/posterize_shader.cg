uniform uint vecKernel[4];
layout (binding=0, rgba8) writeonly uniform image2D destTex;
layout (binding=1, rgba8) readonly uniform image2D srcTex;
uniform float gamma; // 0.6
uniform float numColors; // 8.0

void main (void)
{
	//vec2 uv = gl_TexCoord[0].st;
	//gl_FragColor = PostFX(tex0, uv, time);

	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x < vecKernel[0] && y < vecKernel[1])
	{
		vec4 c = imageLoad(srcTex, storePos);
		c = pow(c, vec4(gamma, gamma, gamma, gamma));
		c = c * numColors;
		c = floor(c);
		c = c / numColors;
		c = pow(c, vec4(1.0/gamma));		
		imageStore(destTex, storePos, color);
	}


}
