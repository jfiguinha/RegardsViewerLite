uniform uint vecKernel[4];
uniform int vecRect[4];
layout (binding=0, rgba8) writeonly uniform image2D destTex;
layout (binding=1, rgba8) readonly uniform image2D srcTex;

float Cubic( float f )
{
	if (f < -2.0 || f > 2.0)
		return(0.0);
	else if (f < -1.0)
		return((2.0+f)*(2.0+f)*(2.0+f)/6.0);
	else if (f < 0.0)
		return((4.0+f*f*(-6.0-3.0*f))/6.0);
	else if (f < 1.0)
		return((4.0+f*f*(-6.0+3.0*f))/6.0);
	else if (f < 2.0)
		return((2.0-f)*(2.0-f)*(2.0-f)/6.0);
	return(0.0);
}

vec4 BiCubic(float x, float y)
{
	vec4 nDenom = vec4(0.0,0.0,0.0,0.0);
	vec4 nSum = vec4(0.0,0.0,0.0,0.0);
	uint valueA = uint(x);
	uint valueB = uint(y);
	uint width = vecKernel[2];
	uint height = vecKernel[3];		
	float realA = x - valueA;
	float realB = y - valueB;
	
	float tabF[4];
	float tabF1[4];

	for (uint n = 0; n < 4; n++)
	{
		tabF1[n] = Cubic(-(float(n - 1) - realB));
		tabF[n] = Cubic(float(n - 1) - realA);
	}	
	
	int debutN = -1;
	int finN = 2;
	//Calcul démarrage du y;
	if (valueB == 0)
	{
		debutN = 0;
	}

	if (valueB == height - 2)
	{
		finN = 1;
	}

	if (valueB == height - 1)
	{
		finN = 0;
	}

	int debutM = -1;
	int finM = 2;
	//Calcul démarrage du x;
	if (valueA == 0)
	{
		debutM = 0;
	}

	if (valueA == width - 2)
	{
		finM = 1;
	}

	if (valueA == width - 1)
	{
		finM = 0;
	}
		
	for (int n = debutN; n <= finN; n++)
	{
		uint posY = valueB + n;	
		float f1 = tabF1[n + 1];
		for (int m = debutM; m <= finM; m++)
		{
			uint posX = valueA + m;			
			vec4 src_color = imageLoad(srcTex, ivec2(posX, posY));
			float f = tabF[m + 1];
			f *= f1;
			nDenom += vec4(f,f,f,f);
			nSum += src_color*vec4(f,f,f,f);
		}
	}
    return nSum / nDenom;
}

// Shader for interpolating Bi cubic in Triangular method.
void main()
{
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	int left = vecRect[0];
	int top = vecRect[1];
	int bitmapWidth = vecRect[2];
	int bitmapHeight = vecRect[3];
	
	if(x < vecKernel[0] && y < vecKernel[1])
	{
		uint widthIn = vecKernel[2];
		uint heightIn = vecKernel[3];	
		
		float ratioX = float(widthIn) / float(bitmapWidth);
		float ratioY = float(heightIn) / float(bitmapHeight);	
		
		float posX = float(x) * ratioX + float(left) * ratioX;
		float posY = float(y) * ratioY + float(top) * ratioY;

		imageStore(destTex, storePos, BiCubic(posX, posY));
	}
}
