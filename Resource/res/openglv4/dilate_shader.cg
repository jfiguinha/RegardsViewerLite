uniform uint vecKernel[4];
layout (binding=0, rgba8) writeonly uniform image2D destTex;
layout (binding=1, rgba8) readonly uniform image2D srcTex;

void main()
{
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x < vecKernel[0] && y < vecKernel[1])
	{
		vec4 minvalue = vec4(1.0,1.0,1.0,1.0);

		for(int y = -1;y < 2; y++)
		{
			int posY = int(gl_GlobalInvocationID.y) + y;
			if(posY >= 0 && posY < vecKernel[1])
			{
				for(int x = -1;x < 2; x++)
				{
					int posX = int(gl_GlobalInvocationID.x) + x;		
					if(posX >= 0 && posX < vecKernel[0])
					{
						vec4 src_color = imageLoad(srcTex, ivec2(uint(posX),uint(posY)));		
						minvalue = min(minvalue,src_color);
					}
				}
			}
		}
		imageStore(destTex, storePos, minvalue);
	}
}