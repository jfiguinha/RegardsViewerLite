uniform uint vecKernel[4];
layout (binding=0, rgba8) writeonly uniform image2D destTex;
layout (binding=1, rgba8) readonly uniform image2D srcTex;

float Cubic( float f )
{
	if (f < -2.0 || f > 2.0)
		return(0.0);
	else if (f < -1.0)
		return((2.0+f)*(2.0+f)*(2.0+f)/6.0);
	else if (f < 0.0)
		return((4.0+f*f*(-6.0-3.0*f))/6.0);
	else if (f < 1.0)
		return((4.0+f*f*(-6.0+3.0*f))/6.0);
	else if (f < 2.0)
		return((2.0-f)*(2.0-f)*(2.0-f)/6.0);
	return(0.0);
}

vec4 GetColorSrc(uint x, uint y)
{
	uint widthIn = vecKernel[2];
	uint heightIn = vecKernel[3];
	if(x < widthIn && y < heightIn && y >= 0 && x >= 0)	
	{
		return imageLoad(srcTex, ivec2(x, y));
	}
	return vec4(0.0,0.0,0.0,0.0);
}

vec4 BiCubic(float x, float y)
{
	vec4 nDenom = vec4(0.0,0.0,0.0,0.0);
	vec4 nSum = vec4(0.0,0.0,0.0,0.0);
	uint valueA = uint(x);
	uint valueB = uint(y);
	float realA = x - valueA;
	float realB = y - valueB;
	
	for (int n = -1; n <= 1; n++)
	{
		uint posY = valueB + n;	
		float f1 = Cubic(-(float(n) - realB));
		for (int m = -1; m <= 1; m++)
		{
			uint posX = valueA + m;			
			float f = Cubic(float(m) - realA);
			f *= f1;
			nDenom += vec4(f,f,f,f);
			nSum += GetColorSrc(posX, posY)*vec4(f,f,f,f);
		}
	}
    return nSum / nDenom;
}

// Shader for interpolating Bi cubic in Triangular method.
void main()
{
	ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x < vecKernel[0] && y < vecKernel[1])
	{
		uint width = vecKernel[0];
		uint height = vecKernel[1];
		uint widthIn = vecKernel[2];
		uint heightIn = vecKernel[3];	
		
		float ratioX = float(widthIn) / float(width);
		float ratioY = float(heightIn) / float(height);	
		
		float posX = float(x) * ratioX;
		float posY = float(y) * ratioY;

		imageStore(destTex, storePos, BiCubic(posX, posY));
	}
}
