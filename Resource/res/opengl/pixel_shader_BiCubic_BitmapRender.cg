uniform sampler2D Picture;

uniform float fWidth;
uniform float fHeight;
uniform float fWidthOutput;
uniform float fHeightOutput;
uniform float fAngle;
uniform int   flipV; 
uniform int   flipH;
uniform int	  BicubicEnable;

vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 BiCubic(vec2 texCoords){

   vec2 texSize = vec2(fWidth, fHeight);
   vec2 invTexSize = 1.0 / texSize;
   
   texCoords = texCoords * texSize - 0.5;

   
    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;
    
    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;
    
    offset *= invTexSize.xxyy;
    
    vec4 sample0 = texture2D(Picture, offset.xz);
    vec4 sample1 = texture2D(Picture, offset.yz);
    vec4 sample2 = texture2D(Picture, offset.xw);
    vec4 sample3 = texture2D(Picture, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

/*
float Cubic( float f )
{
	if (f < -2.0)
		return(0.0);
	if (f < -1.0)
		return((2.0+f)*(2.0+f)*(2.0+f)/6.0);
	if (f < 0.0)
		return((4.0+f*f*(-6.0-3.0*f))/6.0);
	if (f < 1.0)
		return((4.0+f*f*(-6.0+3.0*f))/6.0);
	if (f < 2.0)
		return((2.0-f)*(2.0-f)*(2.0-f)/6.0);
	return(0.0);
}

vec4 BiCubic(vec2 TexCoord)
{
	float texelSizeX = 1.0 / fWidth; //size of one texel 
	float texelSizeY = 1.0 / fHeight; //size of one texel 
    vec4 nSum = vec4( 0.0, 0.0, 0.0, 0.0 );
    vec4 nDenom = vec4( 0.0, 0.0, 0.0, 0.0 );
    float a = fract( TexCoord.x * fWidth ); // get the decimal part
    float b = fract( TexCoord.y * fHeight ); // get the decimal part

	int nX = int(TexCoord.x * fWidth);
	int nY = int(TexCoord.y * fHeight);
	vec2 TexCoord1 = vec2( float(nX) / fWidth + 0.5 / fWidth,
					       float(nY) / fHeight + 0.5 / fHeight );

    for( int m = -1; m <=2; m++ )
    {
        for( int n =-1; n<= 2; n++)
        {
			vec4 vecData = texture2D(Picture, TexCoord1 + vec2(texelSizeX * float( m ), texelSizeY * float( n )));
			float f  = Cubic( float( m ) - a );
			vec4 vecCooef1 = vec4( f,f,f,f );
			float f1 = Cubic( -( float( n ) - b ) );
			vec4 vecCoeef2 = vec4( f1, f1, f1, f1 );
            nSum = nSum + ( vecData * vecCoeef2 * vecCooef1  );
            nDenom = nDenom + (( vecCoeef2 * vecCooef1 ));
        }
    }
    return nSum / nDenom;
}
*/

vec4 TextureBiCubicPosValue(float posX, float posY, float xDiff, float yDiff)
{
	float texelSizeX = 1.0 / fWidthOutput; //size of one texel 
	float texelSizeY = 1.0 / fHeightOutput; //size of one texel 
	vec2 resolution = vec2(texelSizeX, texelSizeY); 
	if(BicubicEnable == 1)
		return BiCubic(vec2(posX,posY) + resolution * vec2(xDiff, yDiff));
	else
	{
		vec4 nSum = vec4( 0.0, 0.0, 0.0, 0.0 );
		vec4 nDenom = vec4( 0.0, 0.0, 0.0, 0.0 );
		vec2 TexCoord = vec2(posX,posY) + resolution * vec2(xDiff, yDiff);
		float a = fract( TexCoord.x * fWidth ); // get the decimal part
		float b = fract( TexCoord.y * fHeight ); // get the decimal part

		int nX = int(TexCoord.x * fWidth);
		int nY = int(TexCoord.y * fHeight);
		vec2 TexCoord1 = vec2( float(nX) / fWidth + 0.5 / fWidth,
							   float(nY) / fHeight + 0.5 / fHeight );
		return texture2D(Picture, TexCoord1 + vec2(texelSizeX, texelSizeY));
	}
}



// Shader for interpolating Bi cubic in Triangular method.
void main()
{
	vec4 temp;	
	float posX = gl_TexCoord[0].s;
	float posY = gl_TexCoord[0].t;

	if(flipV == 1)
	{
		posY = 1.0 - posY;
	}
	
	if(flipH == 1)
	{
		posX = 1.0 - posX;
	}	
	
	if(fAngle == 90.0)
	{
		float x = gl_TexCoord[0].s;
		float y = 1.0 - gl_TexCoord[0].t;	
		posX = y;
		posY = x;
	}
	else if(fAngle == 180.0)
	{
		posX = 1.0 - posX;
		posY = 1.0 - posY;
	}
	else if(fAngle == 270.0)
	{
		float x = 1.0 - gl_TexCoord[0].s;
		float y = gl_TexCoord[0].t;	
		posX = y;
		posY = x;

	}
	
	vec4 data = TextureBiCubicPosValue(posX, posY, 0.0, 0.0);
	gl_FragColor = data;
}
