uniform sampler2D texUnit;
uniform float fWidth;
uniform float fHeight;
uniform float radius;

#define s2(a, b)				temp = a; a = min(a, b); b = max(temp, b);
#define mn3(a, b, c)			s2(a, b); s2(a, c);
#define mx3(a, b, c)			s2(b, c); s2(a, c);
#define mnmx3(a, b, c)			mx3(a, b, c); s2(a, b);                                   // 3 exchanges
#define mnmx4(a, b, c, d)		s2(a, b); s2(c, d); s2(a, c); s2(b, d);                   // 4 exchanges
#define mnmx5(a, b, c, d, e)	s2(a, b); s2(c, d); mn3(a, c, e); mx3(b, d, e);           // 6 exchanges
#define mnmx6(a, b, c, d, e, f) s2(a, d); s2(b, e); s2(c, f); mn3(a, b, c); mx3(d, e, f); // 7 exchanges 


vec4 TextureValue(float posX, float posY, float xDiff, float yDiff)
{
	float texelSizeX = 1.0 / fWidth; //size of one texel 
	float texelSizeY = 1.0 / fHeight; //size of one texel 
	vec2 resolution = vec2(texelSizeX, texelSizeY); 
	return texture2D(texUnit, vec2(posX,posY) + resolution * vec2(xDiff * radius, yDiff * radius));
}

void main(void)
{			
	vec4 temp;														  	
	vec4 kernel[9];
	float posX = gl_TexCoord[0].s;
	float posY = gl_TexCoord[0].t;
	
	kernel[0] = TextureValue(posX, posY, -1.0, -1.0);
	kernel[1] = TextureValue(posX, posY, 0.0, -1.0);
	kernel[2] = TextureValue(posX, posY, 1.0, -1.0);
	kernel[3] = TextureValue(posX, posY, -1.0, 0.0);
	kernel[4] = TextureValue(posX, posY, 0.0, 0.0);
	kernel[5] = TextureValue(posX, posY, 1.0, 0.0);
	kernel[6] = TextureValue(posX, posY, -1.0, 1.0);
	kernel[7] = TextureValue(posX, posY, 0.0, 1.0);
	kernel[8] = TextureValue(posX, posY, 1.0, 1.0);

	// Starting with a subset of size 6, remove the min and max each time

	mnmx6(kernel[0], kernel[1], kernel[2], kernel[3], kernel[4], kernel[5]);
	mnmx5(kernel[1], kernel[2], kernel[3], kernel[4], kernel[6]);
	mnmx4(kernel[2], kernel[3], kernel[4], kernel[7]);
	mnmx3(kernel[3], kernel[4], kernel[8]);

	//return v[4]; 

	gl_FragColor = kernel[4];

}