uniform sampler2D textureScreen;
uniform sampler2D textureToAdd;
uniform float widthScreen;
uniform float heightScreen;
uniform float textureWidth;
uniform float textureHeight;
uniform float bitmapWidth;
uniform float bitmapHeight;
uniform float left;
uniform float top;

vec4 cubic(float v){
    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
    vec4 s = n * n * n;
    float x = s.x;
    float y = s.y - 4.0 * s.x;
    float z = s.z - 4.0 * s.y + 6.0 * s.x;
    float w = 6.0 - x - y - z;
    return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){

   vec2 texSize = vec2(textureWidth, textureHeight);
   vec2 invTexSize = 1.0 / texSize;
   
   texCoords = texCoords * texSize - 0.5;

   
    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;
    
    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;
    
    offset *= invTexSize.xxyy;
    
    vec4 sample0 = texture2D(sampler, offset.xz);
    vec4 sample1 = texture2D(sampler, offset.yz);
    vec4 sample2 = texture2D(sampler, offset.xw);
    vec4 sample3 = texture2D(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}


void main(void)
{			
	float posX = gl_TexCoord[0].s;
	float posY = gl_TexCoord[0].t; 

	float texelSizeX = 1.0 / widthScreen; //size of one texel 
	float texelSizeY = 1.0 / heightScreen; //size of one texel 
	
	float leftPos = left * texelSizeX;
	float topPos = top * texelSizeY;
	float rightPos = (widthScreen - left) * texelSizeX;
	float bottomPos = (heightScreen - top) * texelSizeY;
	
	if(posX >= leftPos && posX < rightPos && posY >= topPos && posY < bottomPos)
	{
		float x = (((posX - leftPos) * widthScreen) / bitmapWidth);
		float y = (((posY - topPos) * heightScreen) / bitmapHeight);
		gl_FragColor = textureBicubic(textureToAdd, vec2(x, y));
	}
	else
	{
		gl_FragColor = texture2D(textureScreen, vec2(posX,posY));
	}

}