uniform sampler2D textureScreen;
uniform float widthScreen;
uniform float heightScreen;
uniform float left;
uniform float top;
uniform int octaves;
uniform int color1[4];
uniform int color2[4];
uniform float tabFrequence[8];
uniform float tabAmplitude[8];

//
// Description : Array and textureless GLSL 2D simplex noise function.
//      Author : Ian McEwan, Ashima Arts.
//  Maintainer : ijm
//     Lastmod : 20110822 (ijm)
//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.
//               Distributed under the MIT License. See LICENSE file.
//               https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
{
const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
-0.577350269189626,  // -1.0 + 2.0 * C.x
0.024390243902439); // 1.0 / 41.0
// First corner
vec2 i  = floor(v + dot(v, C.yy) );
vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
vec2 i1;
//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
//i1.y = 1.0 - i1.x;
i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
// x0 = x0 - 0.0 + 0.0 * C.xx ;
// x1 = x0 - i1 + 1.0 * C.xx ;
// x2 = x0 - 1.0 + 2.0 * C.xx ;
vec4 x12 = x0.xyxy + C.xxzz;
x12.xy -= i1;

// Permutations
i = mod289(i); // Avoid truncation effects in permutation
vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
+ i.x + vec3(0.0, i1.x, 1.0 ));

vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
m = m*m ;
m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

vec3 x = 2.0 * fract(p * C.www) - 1.0;
vec3 h = abs(x) - 0.5;
vec3 ox = floor(x + 0.5);
vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
vec3 g;
g.x  = a0.x  * x0.x  + h.x  * x0.y;
g.yz = a0.yz * x12.xz + h.yz * x12.yw;
return 130.0 * dot(m, g);
}


float GetValue(float x, float y)
{
int Xint = int(x);
int Yint = int(y);

float Xfrac = x - float(Xint);
float Yfrac = y - float(Yint);

float x0y0,x1y0,x0y1,x1y1;

if(Xint != 0 || Yint != 0)
{
x0y0 = snoise(vec2(Xint,Yint));
x1y0 = snoise(vec2(Xint+1,Yint));
x0y1 = snoise(vec2(Xint,Yint+1));
x1y1 = snoise(vec2(Xint+1,Yint+1));
}
else
{
x0y0 = snoise(vec2(0, 0));
x1y0 = snoise(vec2(1, 0));
x0y1 = snoise(vec2(0, 1));
x1y1 = snoise(vec2(1, 1));
}

//interpolate between those values according to the x and y fractions
float v1 = (x0y0 + (Xfrac * (x1y0 - x0y0)));
float v2 = (x0y1 + (Xfrac * (x1y1 - x0y1)));
float fin = (v1 + (Yfrac * (v2 - v1)));

return fin;
}


void main()
{
float x = gl_TexCoord[0].s;
float y = gl_TexCoord[0].t;
float texelSizeX = 1.0 / widthScreen; //size of one texel
float texelSizeY = 1.0 / heightScreen; //size of one texel
float leftPos = left * texelSizeX;
float topPos = top * texelSizeY;
float rightPos = (widthScreen - left) * texelSizeX;
float bottomPos = (heightScreen - top) * texelSizeY;

vec4 src_color = texture2D(textureScreen, gl_TexCoord[0].st).rgba;

if(x >= leftPos && x < rightPos && y >= topPos && y < bottomPos)
{

float total = 0.0;
float total1 = 0.0;
float total2 = 0.0;
float total3 = 0.0;
float total4 = 0.0;

for(int k=0; k < octaves; k+=4)
{
total1 = GetValue(x*tabFrequence[k], y*tabFrequence[k]) * tabAmplitude[k];
total2 = GetValue(x*tabFrequence[k+1], y*tabFrequence[k+1]) * tabAmplitude[k+1];
total3 = GetValue(x*tabFrequence[k+2], y*tabFrequence[k+2]) * tabAmplitude[k+2];
total4 = GetValue(x*tabFrequence[k+3], y*tabFrequence[k+3]) * tabAmplitude[k+3];
total += total1 + total2 + total3 + total4;
}

total = total*0.5 + 0.5;

if(total<0.0)
total = 0.0;
if(total>1.0)
total = 1.0;

float red = (float(color1[0]) / 255.0) * total + (float(color2[0]) / 255.0) * (1.0-total);
float green = (float(color1[1]) / 255.0) * total + (float(color2[1]) / 255.0) * (1.0-total);
float blue = (float(color1[2]) / 255.0) * total + (float(color2[2]) / 255.0) * (1.0-total);

gl_FragColor = vec4(red, green, blue, src_color.a);
}
else
{
gl_FragColor = src_color;
}
}